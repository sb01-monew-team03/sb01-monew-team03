version: '3'
services:
  db:
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: sprint8:local
    ports:
      - "${APP_PORT}:8080"
    environment:
      PROJECT_NAME: ${PROJECT_NAME}
      PROJECT_VERSION: ${PROJECT_VERSION}
      JVM_OPTS: ${JVM_OPTS}

      SPRING_DATASOURCE_URL: ${DB_URL}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}

      SPRING_PROFILES_ACTIVE: prod

      STORAGE_TYPE: ${STORAGE_TYPE}

      AWS_S3_ACCESS_KEY: ${AWS_S3_ACCESS_KEY}
      AWS_S3_SECRET_KEY: ${AWS_S3_SECRET_KEY}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_PRESIGNED_URL_EXPIRATION: ${AWS_S3_PRESIGNED_URL_EXPIRATION}

      MONGO_URI: ${MONGO_URI}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./storage:/app/.monew/storage

  adminer:
    image: adminer
    ports:
      - "${ADMINER_PORT}:8080"
    depends_on:
      - db

volumes:
  postgres-data: